---
- name: Disable runc app armour profile
  hosts: all
  become: true
  tasks:
    - name: Create symbolic link to disable runc AppArmor profile
      ansible.builtin.file:
        src: /etc/apparmor.d/runc
        dest: /etc/apparmor.d/disable/runc
        state: link
        force: true

    - name: Unload the runc AppArmor profile
      command: apparmor_parser -R /etc/apparmor.d/runc
      ignore_errors: true

- name: Disable swap on machines permanently
  hosts: all
  become: true
  tasks:
    - name: Remove swapfile from /etc/fstab
      ansible.posix.mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Disable swap permanently, persist reboots
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: ^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$
        replace: "#\\1\\2\\3swap\\4"
        backup: true

- name: Install containerd runtime
  hosts: all
  become: true
  tasks:
    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - socat
          - nfs-common
        state: present
        update_cache: true

    - name: Configure module for containerd.
      ansible.builtin.blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter
        create: true
        mode: "0644"

    - name: Load the overlay module
      command: modprobe overlay

    - name: Load the br_netfilter module
      command: modprobe br_netfilter

    - name: Verify that the overlay module is loaded
      ansible.builtin.shell: lsmod | grep overlay
      register: overlay_module
      changed_when: false

    - name: Verify that the br_netfilter module is loaded
      ansible.builtin.shell: lsmod | grep br_netfilter
      register: br_netfilter_module
      changed_when: false

    - name: Print overlay module load status
      ansible.builtin.debug:
        msg: "Overlay module loaded: {{ overlay_module.stdout }}"

    - name: Print br_netfilter module load status
      ansible.builtin.debug:
        msg: "br_netfilter module loaded: {{ br_netfilter_module.stdout }}"

    - name: Add Docker’s official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Create the /etc/apt/keyrings directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Add Docker’s official GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release
          }} stable
        filename: docker
        state: present
        update_cache: true

    - name: Update cache & Full system update
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        cache_valid_time: 3600
        force_apt_get: true

    - name: Install containerd
      ansible.builtin.apt:
        name:
          - containerd
        state: present

    - name: Configure containerd.
      file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: Generate the default containerd configuration
      ansible.builtin.shell: |
        containerd config default | tee /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Update SystemdCgroup to true in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: ^(\s*SystemdCgroup\s*=\s*)false
        line: "            SystemdCgroup = true"
        backup: true

    - name: Enable and start containerd service
      ansible.builtin.systemd:
        name: containerd
        enabled: true
        state: restarted
        daemon-reload: true

    - name: Verify containerd service is running
      ansible.builtin.systemd:
        name: containerd
        state: started
        enabled: true

- name: Setup proper values for /etc/hosts
  hosts: all
  vars:
    default_hosts_content: |
      127.0.0.1 localhost
      127.0.1.1 {{ inventory_hostname }}

      # The following lines are desirable for IPv6 capable hosts
      ::1     ip6-localhost ip6-loopback
      fe00::0 ip6-localnet
      ff00::0 ip6-mcastprefix
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters

  tasks:
    - name: Take a backup of the existing /etc/hosts file
      become: true
      ansible.builtin.copy:
        src: /etc/hosts
        dest: /etc/hosts.bak
        owner: root
        group: root
        mode: "0644"

    - name: Build the hosts file content
      ansible.builtin.set_fact:
        hosts_file_content: |
          {{ default_hosts_content }}
          {% for host in groups['control_plane'] %}
          {{ hostvars[host].ansible_host }} {{ host }}
          {% endfor %}
          {% for host in groups['workers'] %}
          {{ hostvars[host].ansible_host }} {{ host }}
          {% endfor %}
          {% for host in groups['new_master'] %}
          {{ hostvars[host].ansible_host }} {{ host }}
          {% endfor %}
          {% for host in groups['jump_server'] %}
          {{ hostvars[host].ansible_host }} {{ host }}
          {% endfor %}

    - name: Write the new /etc/hosts file
      become: true
      ansible.builtin.copy:
        content: "{{ hosts_file_content }}"
        dest: /etc/hosts
        owner: root
        group: root
        mode: "0644"
